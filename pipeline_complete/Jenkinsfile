#!/usr/bin/env groovy

// Pipeline complete

// Pipeline parameters
// GIT_URL_WEB_APP: 'https://github.com/pmdevel/jenkins2-demo-source-webapp.git'
// GIT_URL_WEB_APP_TEST: 'https://github.com/pmdevel/jenkins2-demo-source-webtest.git'
// AUTOMATIC_DEPLOY_IN_PRODUCTION: false

String gitUrlWebApp = GIT_URL_WEB_APP
String gitUrlWebAppTest = GIT_URL_WEB_APP_TEST
boolean automaticDeployInProcuction = AUTOMATIC_DEPLOY_IN_PRODUCTION

def getAppContainerName() {
    return 'pmdevel/codenite-demo-app'
}

def waitForManualApproval(def messageText, def buttonText, def time, def unit) {
    def userInput = ""

    try {
        timeout(time: time, unit: unit) {
            userInput = input(
                    id: 'deploymentConfirmation', vale: 'continue', message: messageText, ok: buttonText,
                    submitter: 'jenkins', submitterParameter: 'deploymentApprovedBy'
            )
        }
    } finally {
        echo ("User input: ${userInput}")
    }

    return userInput
}

boolean isContainerRunning(String alias) {
    def isRunning = sh(
            script: "docker inspect --format=\"{{ .State.Running }}\" ${alias} || exit 0",
            returnStdout: true
    ).trim()

    if (isRunning == 'true') {
        return true
    }

    return false
}

String startContainer(String containerVersion, String containerId, String containerPort, String profile) {
    String containerName = getAppContainerName()
    String alias = containerName.replace('/', '-') + "-" + containerId
    String javaOpts = "-e JAVA_OPTS=-Dspring.profiles.active=${profile}"
    if (isContainerRunning(alias)) {
        echo "Container with id ${alias} is running, stopping it..."
        stopContainer(containerId)
    }
    sh "docker run --rm  --name ${alias} -d -p ${containerPort}:9090 ${javaOpts} ${containerName}:${containerVersion}"
    def ipAddress = sh(
            script: "docker inspect --format=\"{{ .NetworkSettings.IPAddress }}\" ${alias} || exit 0",
            returnStdout: true
    ).trim()
    echo "Started ${alias} on IP: ${ipAddress}"
    return ipAddress
}

def stopContainer(String containerId) {
    String containerName = getAppContainerName() + '-' + containerId
    String alias = containerName.replace('/', '-')
    sh "docker stop ${alias}"
}


def runTests(String profile, String sutUrl, String sutVersion, String testsToRun) {
    sh "mvn clean test -Dtest=${testsToRun} -Dspring.profiles.active=${profile} -Dsut.url=${sutUrl} -Dsut.version=${sutVersion}"
}

def abort(String errorMessage) {
    currentBuild.result = 'ABORTED'
    error(errorMessage)
}

//<<<<<<<<<<<<<<<<<<<<<<<< PIPELINE START >>>>>>>>>>>>>>>>>>>>>>>>
stage('Build and JUnit Test') {
    node('maven') {

        if (gitUrlWebApp.isEmpty()) {
            abort("Git URL to web app project is empty, aborting")
        }

        if (gitUrlWebAppTest.isEmpty()) {
            abort("Git URL to web app test project is empty, aborting")
        }

        echo 'Check-out code...'
        // Use pipeline parameter for Git URL
        git credentialsId: 'github-pmdevel', url: gitUrlWebApp
        echo 'Building...'

        // Let Maven help you to create a "release" version. Use BUILD_NUMBER from Jenkins
        sh 'mvn build-helper:parse-version versions:set -DnewVersion=\\${parsedVersion.majorVersion}.\\${parsedVersion.minorVersion}.$BUILD_NUMBER versions:commit '

        // Get version from pom
        def pom = readMavenPom file: 'pom.xml'
        writeFile file: "version.properties", text: "version=${pom.version}"

        sh 'cat version.properties'

        sh "mvn -B clean test || exit 0"

        // Pipeline will be aborted in state 'UNSTABLE' on failed JUnit tests
        step([$class: 'JUnitResultArchiver', testResults: '**/surefire-reports/TEST-*.xml'])

        stash includes: "version.properties", name: "version"
    }
}

stage('Build Docker Container') {
    node('maven') {
        echo 'Junit testing...'
        unstash "version"

        //sh "mvn package docker:build -DpushImage "
        sh "mvn package docker:build -DskipTests"
    }
}

stage('System Test (Parallel)') {

    node('maven') {
        git credentialsId: 'github-pmdevel', url: gitUrlWebAppTest
        stash includes: "**/*", name: "all"
    }
    parallel(
            "system-tests-suite1": {
                node('maven') {
                    unstash "all"
                    def props = readProperties file: 'version.properties'
                    def containerVersion = props.version
                    def containerName = getAppContainerName()
                    def containerPort = '9001'
                    def containerId = 'systemtest1'
                    echo "Starting container ${containerName}:${containerPort}..."
                    def ipAddress = startContainer(containerVersion, containerId, containerPort, 'systemtest');
                    echo "Starting test of container ${containerName}:${containerPort}..."
                    runTests('systemtest', "http://${ipAddress}:9090", containerVersion, "**/systemtest/*_Suite1*");
                    step([$class: 'JUnitResultArchiver', testResults: '**/surefire-reports/TEST-*.xml'])
                    stopContainer('systemtest1')
                }
            },
            "system-tests-suite2": {
                node('maven') {
                    unstash "all"
                    def props = readProperties file: 'version.properties'
                    def containerVersion = props.version
                    def containerName = getAppContainerName()
                    def containerPort = '9002'
                    def containerId = 'systemtest2'
                    echo "Starting ${containerName}:${containerPort}..."
                    def ipAddress = startContainer(containerVersion, containerId, containerPort, 'systemtest');
                    echo "Starting test of container ${containerName}:${containerPort}..."
                    runTests('systemtest', "http://${ipAddress}:9090", containerVersion, "**/systemtest/*_Suite2*");
                    step([$class: 'JUnitResultArchiver', testResults: '**/surefire-reports/TEST-*.xml'])
                    stopContainer('systemtest2')
                }
            }
    )

}

stage('Acceptance Test') {
    node('maven') {
        echo 'Acceptance Testing...'
        unstash "version"
        sh 'cat version.properties'
        def props = readProperties file: 'version.properties'

        def containerName = getAppContainerName()
        def containerVersion = props.version
        def containerPort = '9003'
        def containerId = 'acceptance1'

        // Start container
        echo "Starting container ${containerName}:${containerPort}"
        def ipAddress = startContainer(containerVersion, containerId, containerPort, 'acceptancetest')
        sleep(5)
        // Start test
        echo "Start tests of container ${containerName}:${containerPort}"
        runTests('acceptancetest', "http://${ipAddress}:9090", containerVersion, "**/acceptancetest/*");
        step([$class: 'JUnitResultArchiver', testResults: '**/surefire-reports/TEST-*.xml'])
        stopContainer(containerId);
    }
}

stage('Deploy in PRODUCTION') {

    echo "Automatic deploy in production: ${automaticDeployInProcuction}"
    if ( automaticDeployInProcuction == 'false') {
        waitForManualApproval("Do you want to deploy in PROCTION", "Deploy", 30, 'SECONDS')
    }

    node('maven') {
        echo 'Deploying to PRODUCTION...'
        unstash "version"
        sh 'cat version.properties'
        def props = readProperties file: 'version.properties'
        echo "Application version: ${props.version}"
        def containerVersion = props.version
        def containerName = getAppContainerName()
        def containerPort = '9004'
        def containerId = 'production'

        echo "Starting ${containerName}..."
        startContainer(containerVersion, containerId, containerPort, 'production');

    }
}
