


def getAppContainerName() {
    return 'pmdevel/codenite-demo-app'
}

def startContainer(String containerVersion, String containerId, String containerPort, String profile) {
    String containerName = getAppContainerName()
    String alias = containerName.replace('/', '-') + "-" + containerId
    String javaOpts = "-e JAVA_OPTS=-Dspring.profiles.active=${profile}"
    sh "docker run --rm  --name ${alias} -d -p ${containerPort}:9090 ${javaOpts} ${containerName}:${containerVersion}"
}

def stopContainer(String containerId ) {
    String containerName = getAppContainerName() + '-' + containerId
    String alias = containerName.replace('/', '-')
    sh "docker stop ${alias}"
}

def startTests(String profile, String sutUrl, String sutVersion) {
    echo 'Check-out test code...'
    // Use pipeline parameter for Git URL
    git credentialsId: 'github-pmdevel', url: 'https://github.com/pmdevel/jenkins2-demo-source-webtest.git'
    sh "mvn clean test -Dspring.profiles.active=${profile} -Dsut.url=${sutUrl} -Dsut.version=${sutVersion}"
}

//<<<<<<<<<<<<<<<<<<<<<<<< PIPELINE START >>>>>>>>>>>>>>>>>>>>>>>>
stage('Build') {
    node('maven') {

        echo 'Check-out code...'
        // Use pipeline parameter for Git URL
        git credentialsId: 'github-pmdevel', url: 'https://github.com/pmdevel/jenkins2-demo-source-webapp.git'
        echo 'Building...'

        // Let Maven help you to create a "release" version. Use BUILD_NUMBER from Jenkins
        sh 'mvn build-helper:parse-version versions:set -DnewVersion=\\${parsedVersion.majorVersion}.\\${parsedVersion.minorVersion}.$BUILD_NUMBER versions:commit '

        // Get version from pom
        def pom = readMavenPom file: 'pom.xml'
        writeFile file: "version.properties", text: "version=${pom.version}"

        sh 'cat version.properties'
        stash includes: "version.properties", name: "$JOB_NAME"
        // Build application, package into docker image and push it to Docker Hub...
        // version comes with build-arg VERSION
        //sh "mvn clean package docker:build -DpushImage "
        sh "mvn clean package docker:build "
    }
}

stage('System Test (Parallel)') {
    node('maven') {
        echo 'Testing...'
        unstash "$JOB_NAME"
        sh 'cat version.properties'
        def props = readProperties file: 'version.properties'
        def containerVersion = props.version
        def containerName = getAppContainerName()

        //parallel 'system-tests-suite1':{
            // Start container
            def containerPort = '9001'
            def containerId = 'systemtest1'
            echo "Starting container ${containerName}:${containerPort}..."
            startContainer(containerVersion, containerId, containerPort, 'systemtest');

            echo "Starting test of container ${containerName}:${containerPort}..."
            startTests('systemtest', "http://172.17.0.4:9090", containerVersion)
            stopContainer(containerId);
        //}, 'system-tests-suite2':{
        /*
            def containerPort = '9002'
            def containerId = 'suite2'
            echo "Starting ${containerName}_part2:${containerPort}..."
            startContainer(containerVersion, containerId, containerPort, 'systemtest');
            startTests('systemtest', "http://172.17.0.5:9090")
            stopContainer(containerId);
            */
        //}


    }
}

stage('Acceptance Test') {
    node('maven') {
        echo 'Testing...'
        unstash "$JOB_NAME"
        sh 'cat version.properties'
        def props = readProperties file: 'version.properties'

        def containerName = getAppContainerName()
        def containerVersion = props.version
        def containerPort = '9003'
        def containerId = 'acceptance1'

        // Start container
        echo "Starting container ${containerName}:${containerVersion}"
        startContainer(containerVersion, containerId, containerPort, 'acceptancetest');

        // Start test
        echo "Start tests of container ${containerName}:${containerVersion}"
        startTests('acceptancetest', "http://172.17.0.4:9090", containerVersion)

        echo "Stop ${getAppContainerName()}..."
        stopContainer(containerId);

    }
}

stage('Deploy to PRODUCTION') {
    node('maven') {
        echo 'Deploying to PRODUCTION...'
        unstash "$JOB_NAME"
        sh 'cat version.properties'
        def props = readProperties file: 'version.properties'
        echo "Application version: ${props.version}"
        def containerVersion = props.version
        def containerName = getAppContainerName()
        def containerPort = '9004'
        // Start container
        echo "Starting ${containerName}..."

        startContainer(containerVersion, 'prod', containerPort, 'production');

    }
}
