#!/usr/bin/env groovy

// Parameterized build of pipeline 101

// Pipeline parameters
// GIT_URL_WEB_APP: 'https://github.com/pmdevel/jenkins2-demo-source-webapp.git'
// WEB_APP_LISTEN_PORT: 8000 unless specified
// WEB_APP_DEPLOYMENT_PROFILE: default unless specified (default, systemtest, acceptancetest or production)
String gitUrlWebApp = GIT_URL_WEB_APP
String webAppListenPort = WEB_APP_LISTEN_PORT
String webAppDeploymentProfile = WEB_APP_DEPLOYMENT_PROFILE

def abort(String errorMmessage) {
    currentBuild.result = 'ABORTED'
    error(errorMessage)
}

stage ('Build') {
    node ('maven') {
        echo "Building"
        // Check-out code
        if ( gitUrlWebApp.isEmpty() ) {
            abort("Git URL to web app is empty, aborting")
        }
        git credentialsId: 'github-pmdevel', url: gitUrlWebApp

        // Let Maven help you to create a "release" version. Use BUILD_NUMBER from Jenkins
        sh 'mvn build-helper:parse-version versions:set -DnewVersion=\\${parsedVersion.majorVersion}.\\${parsedVersion.minorVersion}.$BUILD_NUMBER versions:commit '

        // Get version from pom
        def pom = readMavenPom file: 'pom.xml'
        writeFile file: "version.properties", text: "version=${pom.version}"

        sh 'cat version.properties'
        // Failure will abort with currentBuild.result: 'FAILURE'
        sh "mvn -B clean compile "

        stash includes: "version.properties, target/**/*", name: "build"
    }
}

stage ('JUnit Test') {
    node ('maven') {
        echo "Testing"
        // Do not recompile
        unstash "build"
        // Failure will abort with currentBuild.result: 'UNSTABLE'
        // -Dfail.junit.tests=true
        sh "mvn -B test || exit 0 "
        step([$class: 'JUnitResultArchiver', testResults: '**/surefire-reports/TEST-*.xml'])
    }
}

stage ('Dockerize') {
    node ('maven') {
        unstash "build"
        sh "mvn -B package docker:build -DskipTests"
    }

}

stage ('Deploy') {
    node ('maven') {
        unstash "build"
        def containerName = 'pmdevel/codenite-demo-app'
        def containerAlias = 'demo-app-101'
        // Get version created in previous stage (build)
        def props = readProperties file: 'version.properties'
        def containerVersion = props.version
        def containerPort = webAppListenPort
        def javaOpts = "-e JAVA_OPTS=-Dspring.profiles.active=${webAppDeploymentProfile}"
        // Stop existing container (if any), ignore bad exit code...
        sh "docker stop ${containerAlias} || exit 0"
        echo "Starting ${containerName}"
        sh "docker run --rm  --name ${containerAlias} -d -p ${containerPort}:9090 ${javaOpts} ${containerName}:${containerVersion}"
        echo "${containerName} with alias ${containerAlias} started, listening on port ${containerPort}..."
        echo "Access it on http://localhost:${containerPort}"
    }

}
